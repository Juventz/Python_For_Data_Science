```c
#include <stdio.h> // sprintf
#include <stdlib.h> // malloc, realloc, free, calloc, atoi and exit
#include <unistd.h> // write, close and select
#include <string.h> //strstr, strlen, strcpy, strcat, memset and bzero
#include <sys/socket.h> // socket, accept, listen, send, recv and bind
#include <netinet/in.h>
#include <sys/select.h> // fd_set

// Contains the client id and the message of the client
typedef struct s_client
{

	int		id;
	char	msg[100000];
}	t_client;


t_client	clients[1024];
fd_set		read_set, write_set, current;
int			maxfd = 0, gid = 0;
char		send_buffer[120000], recv_buffer[120000]; // Buffers for sending and receiving messages


// Function to display errors and exit the program
void	err(char *msg)
{
	if (msg)
		write(2, msg, strlen(msg));
	else
		write(2, "Fatal error", 11);
	write(2, "\n", 1);
	exit(1);
}

// Function to send a message to all clients except the specified one
void	send_to_all(int except)
{
	for (int fd = 0; fd <= maxfd; fd++)
	{
		if (FD_ISSET(fd, &write_set) && fd != except)
			if (send(fd, send_buffer, strlen(send_buffer), 0) == -1)
				err(NULL);
	}
}

int main(int ac, char **av)
{
	if (ac != 2)
		err("Wrong number of arguments");

	struct sockaddr_in  serveraddr;
	socklen_t           len;

	// Create a server socket
	int serverfd = socket(AF_INET, SOCK_STREAM, 0);
	if (serverfd == -1) err(NULL);
	maxfd = serverfd;

	FD_ZERO(&current);
	FD_SET(serverfd, &current); // Add the server socket to the current set
	bzero(clients, sizeof(clients)); // Initialize the clients array
	bzero(&serveraddr, sizeof(serveraddr)); // Initialize the server address

	serveraddr.sin_family = AF_INET; // Set the server address
	serveraddr.sin_addr.s_addr = htonl(INADDR_ANY); // Set the server ip	
	serveraddr.sin_port = htons(atoi(av[1])); // Set the server port

	// Bind the server socket to the server address and listen for incoming connections
	if (bind(serverfd, (const struct sockaddr *)&serveraddr, sizeof(serveraddr)) == -1 || listen(serverfd, 100) == -1)
		err(NULL);

	while (1)
	{
		// Copy the current set to the read and write set
		read_set = write_set = current;
		
		// use select to check an event on the sockets
		if (select(maxfd + 1, &read_set, &write_set, 0, 0) == -1) continue;

		
		for (int fd = 0; fd <= maxfd; fd++)
		{  
			if (FD_ISSET(fd, &read_set))
			{
				if (fd == serverfd)
				{
					int clientfd = accept(serverfd, (struct sockaddr *)&serveraddr, &len);
					
					if (clientfd == -1)
						continue;
					if (clientfd > maxfd)
						maxfd = clientfd;
					
					clients[clientfd].id = gid++;
					FD_SET(clientfd, &current);
					sprintf(send_buffer, "server: client %d just arrived\n", clients[clientfd].id);
					send_to_all(clientfd);
					break ;
				} 
				else
				{
					
					int ret = recv(fd, recv_buffer, sizeof(recv_buffer), 0);
					
					if (ret <= 0)
					{
						sprintf(send_buffer, "server: client %d just left\n", clients[fd].id);
						send_to_all(fd); // Send a disconnection message to all clients
						FD_CLR(fd, &current); // Remove the client from the watched set
						close(fd);
						break;
					}
					else
					{
						for (int i = 0, j = strlen(clients[fd].msg); i < ret; i++, j++)
						{
							clients[fd].msg[j] = recv_buffer[i]; // Copy the received message to the client message buffer
							if (clients[fd].msg[j] == '\n') // If a complete message is received, broadcast it to all clients
							{
								clients[fd].msg[j] = '\0';
								sprintf(send_buffer, "client %d: %s\n", clients[fd].id, clients[fd].msg);
								send_to_all(fd);
								bzero(clients[fd].msg, strlen(clients[fd].msg)); // Reset the client's buffer
								j = -1;
							}
						}
						break;
					}
				}
			}
		}
	}
	return (0);
}
```